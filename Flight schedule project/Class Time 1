/**
 * Represents time - hours:minutes. Coordinates cannot be negative.
 *
 * @author: Maya Katan
 * @Date: 14.05.2022
 * @ID: 318266913
 */

public class Time1
{
    // instance variables and contants
    private int _hour, _minute;
    private final int MAX_HOUR = 24, MAX_MINUTE = 60, MIN = 0;
    int MINUTES_A_DAY = 1440;  // The number of minutes in pone day. 
    
    // constructor which gets parameters
    /**
     * Constructs a Time1 object.
     * Construct a new time instance with the specified hour and minute.
     * hour should be between 0-23, otherwise it should be set to 0. minute should be between 0-59,
     * otherwise it should be set to 0.
     * 
     * @param h  the hour of the time
     * @param m  the minute of the time
     */
    public Time1(int h, int m)
    { 
        if (h < MAX_HOUR && h >= MIN) {
            _hour = h;
        }
        else {
            _hour = MIN;
        }
        
        if (m < MAX_MINUTE && m >= MIN) {
            _minute = m;
        }    
        else {
            _minute = MIN;
        }
    }

    // copy constructor
    /**
     * Copy constructor for Time1.
     * Construct a time with the same instance variables as another time.
     *
     * @param other  The time object from which to construct the new time
     */
    public Time1(Time1 other)
    { //API complete
        _hour = other._hour;
        _minute = other._minute;
    }
    
    // get method
    /**
     * Returns the hour of the time.
     *
     * @return  The hour of the time
     */
    public int getHour()
    {
        return _hour;
    }
    
    /**
     * Returns the minute of the time.
     *
     * @return  The minute of the time
     */
    public int getMinute()
    {
        return _minute;
    }
    
    // set method
    /**
     * Changes the hour of the time. If an illegal number is received hour will be unchanged.
     *
     * @return  The new hour
     */
    public void setHour(int num)
    { 
        if (num >= MIN && num < MAX_HOUR)
            _hour = num;
    }  
    
    /**
     * Changes the minute of the time. If an illegal number is received minute will be unchanged.
     *
     * @return  The new minute
     */
    public void setMinute(int num)
    { 
        if (num >= MIN && num < MAX_MINUTE)
            _minute = num;
    }
    
    // toString method
    /**
     * Return a string representation of this time (hh:mm).
     *
     * @return  String representation of this time (hh:mm).
     */
    public String toString()
    { 
        if(this._hour > 9 && this._minute > 9) {
            return this._hour+ ":" +this._minute;
        }
        else if (this._hour > 9 && this._minute < 10) {
            return this._hour+ ":0" +this._minute;
        }
        else if (this._hour < 10 && this._minute > 9) {
            return "0" +this._hour+ ":" +this._minute;
        }
        else {
            return "0" +this._hour+ ":0" +this._minute;
        }
    }

    // time in minutes since midnight calculation method
    /**
     * Return the amount of minutes since midnight.
     *
     * @return  amount of minutes since midnight.
     */
    public int minFromMidnight()
    { 
        return ((this._hour * MAX_MINUTE) + this._minute);
    }
    
    // other methods
    /**
     * Check if the received time is equal to this time.
     *
     * @param other  The time to be compared with this time
     * 
     * @return True if the received time is equal to this time
     */
    public boolean equals(Time1 other)
    { 
        return (this.minFromMidnight() == other.minFromMidnight());
    }
    
    /**
     * Check if this time is before a received time.
     *
     * @param other  The time to check if this time is before
     * 
     * @return  True if this time is before other time
     */
    public boolean before(Time1 other)
    { 
        return (this.minFromMidnight() < other.minFromMidnight());
    }
    
    /**
     * Check if this time is after a received time.
     *
     * @param other  The time to check if this time is after
     * 
     * @return  True if this time is after other time
     */
    public boolean after(Time1 other)
    { 
        return (this.minFromMidnight() > other.minFromMidnight());
    }
    
    /**
     * Calculates the difference (in minutes) between two times.
     * Assumption: this time is after other time.
     * 
     * @param other  The time to check the difference to
     * 
     * @return  int difference in minutes
     */
    public int difference(Time1 other)
    { 
        return (this.minFromMidnight() - other.minFromMidnight());
    }
    
    // addition minutes calculation method
    /**
     * Copy current object and add requested minutes to new object.
     * 
     * @param num The minutes need to add.
     * 
     * @return  new update Time1 object.
     */
    public Time1 addMinutes(int num) 
    { 
        int m = minFromMidnight();
        m += num;
        m %= MINUTES_A_DAY;
        if(m < MIN){
            m += MINUTES_A_DAY;
        }
        return new Time1(m / MAX_MINUTE, m % MAX_MINUTE);
    }
}// end of class Time1
