/**
 * Assignment 11 - Efficient Methods:
 * 
 * Method number 1 ("specialArr"):
 * Rearranges an integer array based on a given median, placing values >= median at even indices and values < median at odd indices.
 * 
 * Time Complexity: O(n) , Space Complexity: O(n)
 * 
 * @param arr Input array of integers.
 * @param med Median value for "specialArr".
 * @return A new array with values rearranged by the specified pattern.
 * 
 * Method number 2 ("first"):
 * Finds the smallest missing positive integer from an integer array, modifying the array to track values within its bounds.
 * 
 * Time Complexity: O(n) , Space Complexity: O(1)
 * 
 * @param Arr input array of integers, modified in place.
 * @return The smallest positive integer missing from the array.
 * 
 * @version 16.11.2024, by Maya Katan
 */
public class Ex11{
    /**
     * Rearranges elements from the input array into a new array where:
     * Elements >= median are placed at even indices.
     * Elements < median are placed at odd indices.
     * 
     * Complexity:
     * Time: O(n) - Single pass through the array.
     * Space: O(n) - Creates a new array of the same size.
     * 
     * @param arr The input array of integers.
     * @param med The median value used for positioning.
     * @return A new array with elements rearranged based on the specified pattern.
     */
   public static int[] specialArr (int[] arr, int med){
    int evenIndex = 0; //Index to the even positions
    int oddIndex = 1; //Index to the odd positions
    int[] specialArr = new int[arr.length];
       for (int i = 0; i < arr.length; i++) {
           if (arr[i] >= med) {
               if (evenIndex < arr.length){ //Checks that the index is in the array field 
                   specialArr[evenIndex] = arr[i];
                   evenIndex += 2; //Move to the next even position;
               }
           }
           else {
               if (oddIndex < arr.length){ //Checks that the index is in the array field
                   specialArr[oddIndex] = arr[i];
                   oddIndex += 2; //Move to the next odd position
               }
           }
       }
    return specialArr;     
   }
   
    /**
     * Finds the smallest positive integer that is missing from the given array.
     * 
     * This method modifies the input array to mark the presence of values within 
     * the range [1, arr.length] and efficiently determines the missing value.
     * 
     * Complexity:
     * Time: O(n) - The method iterates through the array a constant number of times.
     * Space: O(1) - Uses no extra data structures; modifies the input array directly.
     * 
     * @param arr The input array of integers, which may include negative values or values outside the range.
     * @return The smallest positive integer that is missing from the array.
     */
   public static int first (int [] arr){
    int maxIndexRange  = arr.length;
       for (int i = 0; i < arr.length; i++) { //The loop replaces the values ​​that are not in the range (smaller than 1)
            if (arr[i] <= 0 || arr[i] > maxIndexRange) {
                arr[i] = maxIndexRange + 1;
            }
       }
    
       for (int i = 0; i < arr.length; i++) { //The loop marks values ​​that are in the range
            int num = Math.abs(arr[i]);
            if (num <= maxIndexRange) {
                arr[num - 1] = -Math.abs(arr[num - 1]);
            }
       }
    
       for (int i = 0; i < arr.length; i++) { //The loop looks for the smallest missing positive number
            if (arr[i] > 0) {
                return i + 1;
            }
       }
    return maxIndexRange + 1; 
   }
}//End of class Ex11
